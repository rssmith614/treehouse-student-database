rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isWorker(uid) {
      return exists(/databases/$(database)/documents/tutors/$(uid));
    }

    function isAdmin(uid) {
      return isWorker(uid) && get(/databases/$(database)/documents/tutors/$(uid)).data.clearance == 'admin';
    }

    function isTutor(uid) {
      return isWorker(uid) && get(/databases/$(database)/documents/tutors/$(uid)).data.clearance == 'tutor';
    }

    function isParent(uid) {
      return exists(/databases/$(database)/documents/parents/$(uid));
    }

    function isParentOfStudent(parentId, studentId) {
      return isParent(parentId) && get(/databases/$(database)/documents/parents/$(parentId)).data.students.hasAny([studentId]);
    }

    function resourceOwnedByUser(resourceOwner, uid) {
      return resourceOwner == uid;
    }

    match /tutors/{document} {
      allow read, write:
        if request.auth != null && isAdmin(request.auth.uid);
      allow read: if true;
      allow create:
      	if request.auth != null;
      allow update:
        if request.auth != null && isTutor(request.auth.uid) && resourceOwnedByUser(request.auth.uid, request.resource.data.uid);
    }
    
    match /parents/{document} {
        allow read, write:
            if request.auth != null && isAdmin(request.auth.uid);
        allow read: if true;
        allow write:
        	if request.auth != null;
    }

    match /students/{document} {
      // allow read, write: if request.auth != null && isAdmin(request.auth.uid);
      // allow read: if request.auth != null && isTutor(request.auth.uid);

      // allow read: if request.auth != null && isParentOfStudent(request.auth.uid, document);

      allow read: if request.auth != null && (isAdmin(request.auth.uid) || isTutor(request.auth.uid) || isParentOfStudent(request.auth.uid, resource.id));

      allow write: if request.auth != null && isAdmin(request.auth.uid);

      match /standards/{document} {
        allow read, write: if request.auth != null && isAdmin(request.auth.uid);
        allow read, write: if request.auth != null && isTutor(request.auth.uid);
      }

      match /topics/{document} {
        allow read, write: if request.auth != null && (isAdmin(request.auth.uid) || isTutor(request.auth.uid));

        allow read: if request.auth != null && isParentOfStudent(request.auth.uid, document);
      }
    }

    match /evaluations/{eval} {
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
      
      allow read, create: if request.auth != null && isTutor(request.auth.uid);
      allow update, delete:
        if request.auth != null && isTutor(request.auth.uid) && resourceOwnedByUser(resource.data.owner, request.auth.uid);

      allow read: if request.auth != null && isParentOfStudent(request.auth.uid, resource.data.student_id);
    
      match /tasks/{task} {
        allow read, write: if request.auth != null && isAdmin(request.auth.uid);
      
        allow read: if request.auth != null && isTutor(request.auth.uid);
        allow write:
          if request.auth != null && isTutor(request.auth.uid);

        allow read: if request.auth != null && isParentOfStudent(request.auth.uid, get(/databases/$(database)/documents/evaluations/$(eval)).data.student_id);
      }
    }

    match /standards/{standard} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /assessments/{assessment} {
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
      allow read: if request.auth != null && isTutor(request.auth.uid);
    }
    
    match /student_assessments/{assessment} {
      allow update, delete:
        if request.auth != null && isTutor(request.auth.uid) && resourceOwnedByUser(resource.data.issued_by, request.auth.uid);
      allow read, create: if request.auth != null && isTutor(request.auth.uid);
    	allow read, write: if request.auth != null && isAdmin(request.auth.uid);

      allow read: if request.auth != null && isParentOfStudent(request.auth.uid, resource.data.student_id);
    }

    match /grades/{grade} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || isTutor(request.auth.uid));
      allow write: if request.auth != null && isAdmin(request.auth.uid);
      allow create: if request.auth != null && isTutor(request.auth.uid);
      allow update, delete: if request.auth != null && isTutor(request.auth.uid) && resourceOwnedByUser(resource.data.tutor_id, request.auth.uid);

      allow read: if request.auth != null && isParentOfStudent(request.auth.uid, resource.data.student_id);
    }

  }
}